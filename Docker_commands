#docker --version
#docker run hello-world
#docker images #to check images in the system
#docker pull ubuntu #to pull ubuntu image
#docker run -t -d ubuntu #to run container from the image
#docker ps -a # to chek running container
#docker exec -t <container id> bash #give exit to come out the container bash
#docker stop <container id> #to stop running container.
#docker commit <container id> zulaika/ubuntu #This command creates a new image in the local system. zulaika is the repository id and ubuntu is the name of the image
#docker login # To login to the Docker cloud repo
#docker push zulaika/ubuntu to push the local image to Docker repo.
#docker rm <container id> #To remove container
#docker rmi <image id> # To remove docker image
#docker ps -a # to see all containers
#docker exec -it <container id> bash
---
Create simple application using flask and reddis 
Flask in python web fram work and reddis is hit count database.

#mkdir webapplication; cd webapplication
#vi Dockerfile
code:
docker file
-----------------------------
From python:3.4-alpine
Add . /code
Workdir /code
Run pip install -r requirments.txt
CMD ["python", "webapp.py"]
------------------------------
vi webapp.py

import time

import redis
from flask import Flask

app = Flask(app)
cache - redis.Redis(host='redis,port=6379)

def get_hit_count():
    retries = 5
    while True
        try:
           return cache.incr('hits')
        except redis.exceptions.ConnectionsError as exc:
           if retries == 0:
                raise exc
              retries -=1
              time.sleep(0.5)
@app.route('/')
def hello():
    count = get_hit_count()
    return 'Hello World! I hve been seen () times. \n' .format(count)
  
if app == "__main__":
   app.run(host="0.0.0.0", debug=True)
  
:wq
----------------------------------------
  vi requirements.txt
   #keep below 2 name in the file
   flask 
   redis
   :wq
   ------------------------------
   docker-compose.yml
   version: '3'
   services: 
      web:
        build:
        ports: 
          -"5000:5000"
   redis:   
      image: "redis:alpine"
      
  ------------------------
  #create all this files under one dir webapplication directory as created early
  #docker-compose up
  
  ####################################
  ###Docker File and Commands
  #Docker file syntax consists of two kind of main line blocks: comments and commands + arguments.
  
  Ex Syntax
  #Line block used for commenting   ex:   # Print "welcome to site"
  command argument argumenta              Run echo "Welcome to the site!"
  #######################################
  #Docker Different set of commands
  1. FROM : From directive is probably the most crucial amongst all others for Dockerfiles. it defines the base image to use to start the build process. 
 ----- 
  Ex: 
  #usage: FROM [image name]
  From ubuntu  # base image and on top of it will do other functionality 
   -----
 
 2. RUN: The RUN command is the central executing directive for Dockerfiles. it takes a command as its argumetns and runs it to from the image.
         Unlike CMD, it actually is used to build the image.
     
  ----
  ex: 
  #Usage: RUN [command]
  FROM ubuntu
  RUN apt-get install -y riak
  ----
  
  3: CMD: This command CMD, similar to RUN, can be used for the executing a specific command. However, unlike 'RUN' it is not executed during the build,
          but when a container instantiated using the image being built
      
      -------
      ex: 
      #Usage 1: CMD applicaiton "argument","argument",...
      CMD "echo" "Welcome to the site"
     ----
     
     4. ENTRYPOINT: ENTRYPOINT argument sets the concrete default application that is used everytime a container is created using the image. 
      ------
      #USAGE: ENTRYPOINT application "arg","arg",...
      # Remember: arguments are optional. They can be provided by CMD
           #or during the creation of container. 
      
      ENTRYPOINT echo 
      #Usage example with CMD:
      
      #Arguments set with CMD can be overridden during *run* CMD "Hello docker!"
      CMD "Welcome to the site"
      ENTRYPOINT echo                    #this command will be overwrite previos CMD command as it is the first ENTRYPOINT command to execute. 
     --------------------
     
     5. ADD: The ADD command gets 2 arguments: a source and a destincation. basically it copies the files from the sourcer
              on the host into the containers's own filesystem at the set destination. 
              
     -------
       #USAGE: ADD {source dir or URL] [dest dir]
       ADD /my_app_folder /my_app_folder
     -----------         
     
     6. ENV: ENV command is used to set the ENV variables( one or more). These variable consists of "key and pairs". which can be accessed within the 
             container by scripts and application like 
             
    #Usage: ENV Key value
      ENV SERVER_WORKS 4 
      
      7: WORKDIR: to set where the command defined with CMD is to be executed.
        # Usage:
          WORKDIR /path WORKDIR ~/ 
       
       8: EXPOSE: It is used to associate a specified port to enable networking between the running proccess inside the container and the outside world (ie host)
          
          #USAGE: EXPOSE [port]
          EXPOSE 8080
     
     9: MAINTAINER: to add Author name to the container 
        MAINTAINER author_name 
        
     10. USER: To set UID (or username) which is to run the container based on the image being built. 
         #USAGE: USER [UID]
           USER 751
           
      11. VOLUME:  it is used to enable access from your container to a directory on the host machine (ie mounting it)
          
          #USAGE: VOLUME ["/dir_1","dir_2"..]
          VOLUME ["/myfiles"]
       
       ---------------
       vi Dockerfile
        #######CREATE an image to install APACHE Web SErver
        
        FROM ubuntu 
        MAINTAINER knanda
        RUN apt-get update && apt-get install -y apache2 && apt-get clean && rm -r /var/lib/apt/lists/*
        
        ENV APACHE_RUN_USER www-data
        ENV APACHE_RUN_GROUP www-data
        ENV APACHE_LOG_DIR /var/log/apache2
        
        EXPOSE 80
        
        CMD ['/usr/sbin/apache2", "-D" "FOREGROUND"]       
     ----------------      
      #docker build -t myapacheimage . #Docker file must presnt int the location when using '.'
      #docker images
      #docker run -p 80:80 -name=App1 myapacheimage             #fir port is host port and then container port 
      #docker ps # To see running container ps info
      ###access webpage with Docker launch server ip and port 80    
       
      #########Docker File for installing Nginx 
      vi Docker file
       vi Dockerfile
        #######CREATE an image to install APACHE Web SErver
        
        FROM ubuntu 
        MAINTAINER knanda
        RUN apt-get update && apt-get install -y nginx
        ADD index.html /usr/share/nginx/html/index.html  ##note: Keep index file in the same dockerfile location
        
        ENTRYPOINT ["/usr/sbin/nginx", "-g", "daemon off;"
        EXPOSE 80
     ######################     
     #docker build -t mynginximage . # To create image
     #docker run -p 80:80 --name=App2 mynginximage
        
     Most used Docker command
     
     docker --version       docker ps               docker commit
     docker --help          docker images           docker import
     docker pull            docker stop             docker export
     docker run             docker kill             docker container
     docker build           docker rim              dcoker compose
     docker login           docker rmi              docker swarm
     docker push            docker exec             docker service
     
     #docker pull   -> To pull docker image from Docker hub 
                        ex docker pull ubuntu
     #docker images -> This command list down all images in your local repo.
     #docker run    -> This command exec a Docker image on your local repo & create a running container out of it.
                         ex: docker run ubuntu
    #docker pull    -> this command pulls a new docker image from the Docker Hub.
                         $docker pull ubuntu
    # docker build   -> Command used to compile Dockerfile, for building custom Docker images based of the 
                        $ docker build -t MyubuntuImage .              
    
    #docker container -> Command is used to perform various operations on the container. 
                                                $ docker container logs <container id>
                                                $ docker container kill <container id>
                                                $ docker container rm <container id>
                                                $ docker container run <container id>
                                                $ docker container start  <container id>
                                                
    # docker push      ->  command to push Docker image on your local repo to Docker Hub.
                                                $docker push nanda/mynginximage
    # docker tag <imagename> nandakgnk/mynginximage    #name of the dcker repo and image name
     
    #docker ps and docker ps -a - > Command lists all the running containers in the host. 
                                     if '-a' flag is specified, shutdown containers are also displayed. 
    #docker stop <container id>  -> command shutdowns the container whose container id is specified. 
                                    shutdown is gracefull by waiting for other dependencies to shut. 
    
                                     
   #docker kill <container id> -> To kill forcefully 
   # docker exec        -> this command is used to access an already running conained and perform 
                           operations inside the container. 
                               ex: docker exec it <cont id> bash
  # docker commit -> This command creates a new image of an edited container on the local repo.
                       ex: docker commit <container id> dockerid/imageid
   
  # docker export -> is used to export a Docker image into a tar file in your local system.
                      $docker export --output='latest.tar' mycontainer
   
   # docker import /home/kand/Downloads/demo.tgz -> command is used to import the contents of a tar file
                                                    into your local repo
                                                    
                       
   # docker service  -> it is used to control any existing docker service in docker swarn  
     
                                                           ex: dokcer service ls
                                                               docker service ps
                                                               docker service scale
                                                               docker service stop
                                                               docker service logs
                                                                docker service rm
  
  
  
  
  
  
